
						PathFinding algorithm
_____________________________________________________________________________

u32 	     destinationCell        - текущий тайл врага
vector3df    destinationPosition    - текущая позиция врага
CH_DIRECTION direction = CH_D_NONE  - напрвление(для дальнейшего сохранения в него) лучшего следующего направления для движения врага
vector3df    targetPosition	    - computes position of our target

f32 minimalDistance = destinationPosition.getDistanceFromSQ(targetPosition); Возвращает квадрат расстояния от другой точки
									     computes initial value of metric for finding best position



// если корень мин дистанции > minimal distance between cells' centers.
// minimalDistance = Obtains maximal distance between cell's centers (squared).
if (sqrtf(minimalDistance) > _map->getMinimalDistance())
	minimalDistance = _map->getMaximalDistanceSquared();

// checks: is better position exists, if exists then uses it
array<CH_DIRECTION> directions = getAvailableDirections();

	        // в цикле выбираем наилучшее направление из массива в котром остались новые направления
		// путем получения расстояния между соседом и целью для каждого полученного напрвления
		// а потом сравниванием эту дистанцию с minimalDistance: если текущая дистанция меньше то инициализируем ее minimalDistance и в direction сохр это направление
		// повторем это в цикле и вычисляем наилучшее направление
		for (u32 i = 0; i < directions.size(); ++i) {

			// получаем следующий тайл согласно текущему напарвлению из массива
			u32 destinationCell = _map->getDestinationCell(_moving->getPosition(), directions[i]);
			// получаем его позицию
			vector3df destinationPosition = _map->getPosition(destinationCell);

			// вычисляем дистанцию от этого тайла до плеера
			f32 distance = destinationPosition.getDistanceFromSQ(targetPosition);

			if (distance < minimalDistance) {
				direction = directions[i];
				minimalDistance = distance;
			}

		}

		// adds current position to the list of used
		// to prevent up-down or left-right jittering when target 
		// is behind the obstacle
		_usedPositions.push_back(_moving->getPosition());

		// moves controlled entity
		_moving->move(direction);

***********************************************

array<CH_DIRECTION> EnemyMovingController::getAvailableDirections()
{
	u32 targetPosition = _target->getPosition();

	// если плеер нестоит на месте то
	if (_previousTargetPosition != targetPosition) {
		_usedPositions.clear();
		_previousTargetPosition = targetPosition;
	}

	// позиция врага
	u32 position = _moving->getPosition();

	// получить массив с возможными направлениями для 4-ех сторон
	// getAvailableDirections проверяет на припятствия четыре стороны от текущего тайла и возвр в массиве возможные стороны для передвижения врага
	array<CH_DIRECTION> directions = _map->getAvailableDirections(position);

	for (u32 i = 0; i < directions.size(); ++i)
	{
		// destination - следующая позиция для врага по полученному напрвлению из массива
		u32 destination = _map->getDestinationCell(position, directions[i]);
		// если destination уже есть в списке пройденных позиций то удаляем этот directions из имеющегося массива направлений
		if (_usedPositions.linear_search(destination) != -1) {
			directions.erase(i--, 1);
		}
	}

	return directions;
}
**************************************************

_____________________________________________________________________
stage.Type = 0 / ST_LOGO
stage.Type = 1 / ST_MENU
stage.Type = 2 / ST_LEVEL

Stage.size() = 11;

Stage[0] = logo
Stage[1] = splash
Stage[2] = sound
Stage[3] = main
Stage[4] = default
Stage[5] = pauseMenu
Stage[6] = playAgain
Stage[7] = help
Stage[8] = about
Stage[9] = win
Stage[10] = lose

______________________________________________________________________
stage.Type = 0 / ST_LOGO :
						GAME_EVENT
about     defaultDeactivationEvent="18"
	  <activationEvent value="10"/>
	  type="0"
		

help      defaultDeactivationEvent="17"
	  type="0"
	  <activationEvent value="9"/>

logo      defaultDeactivationEvent="3"     GE_GAME_LOGO_FINISHED,
	  type="0"
          <activationEvent value="2"/>

splash    defaultDeactivationEvent="4"     GE_SPLASH_SCREEN_FINISHED,
          type="0"
	  <activationEvent value="3"/>

lose      defaultDeactivationEvent="20"
          type="0"
	  <activationEvent value="14"/>

win       defaultDeactivationEvent="19"
          type="0"
	  <activationEvent value="13"/>

________________________________________________________________________
stage.Type = 1 / ST_MENU


main      defaultDeactivationEvent="0" 	    GE_NULL
	  type="1"

	  <activationEvent value="5"/>      GE_SOUND_ON
          <activationEvent value="6"/>      GE_SOUND_OFF
          <activationEvent value="16"/>	    GE_MAIN_MENU_REQUESTED
	  <activationEvent value="17"/>	    GE_HELP_SCREEN_FINISHED
	  <activationEvent value="18"/>     GE_ABOUT_SCREEN_FINISHED
	  
        <button event="7" text="Play Game"/> GE_LEVEL_REQUESTED
        <button event="8" text="Sound"/>     GE_SOUND_MENU_REQUESTED
        <button event="9" text="Control"/>   GE_HELP_REQUESTED
        <button event="10" text="About"/>    GE_ABOUT_REQUESTED
        <button event="11" text="Exit"/>     GE_EXIT_REQUESTED

pauseMenu defaultDeactivationEvent="0"
	  type="1"
          <activationEvent value="12"/>

	<button event="15" text="Resume"/>
        <button event="16" text="Main Menu"/>
        <button event="11" text="Exit"/>

playAgain defaultDeactivationEvent="0"
	  type="1"
	  <activationEvent value="19"/>
          <activationEvent value="20"/>

	<button event="7" text="Play Again"/>
        <button event="16" text="Main Menu"/>
        <button event="11" text="Exit"/>

sound	  defaultDeactivationEvent="0"        GE_NULL
	  type="1"
	  <activationEvent value="4"/>        GE_SPLASH_SCREEN_FINISHED
          <activationEvent value="8"/>        GE_SOUND_MENU_REQUESTED

	  <button event="5" text="On"/>       GE_SOUND_ON
          <button event="6" text="Off"/>      GE_SOUND_OFF

_______________________________________________________________________


stage.Type = 2 / ST_LEVEL:

default   defaultDeactivationEvent="0"
	  type="2"
 	  <activationEvent value="7"/>
          <activationEvent value="15"/>

___________________________________________

enum GAME_EVENT
{
	0  GE_NULL,

	1  GE_FRAME_ENDED,

	2  GE_GAME_STARTED,

	3  GE_GAME_LOGO_FINISHED,
	4  GE_SPLASH_SCREEN_FINISHED,

	5  GE_SOUND_ON,
	6  GE_SOUND_OFF,

	7  GE_LEVEL_REQUESTED,
	8  GE_SOUND_MENU_REQUESTED,
	9  GE_HELP_REQUESTED,
	10 GE_ABOUT_REQUESTED,
	11 GE_EXIT_REQUESTED,

	12 GE_LEVEL_ABORTED,
	13 GE_LEVEL_SUCCEEDED,
	14 1GE_LEVEL_FAILED,

	15 GE_LEVEL_CONTINUATION_REQUESTED,
	16 GE_MAIN_MENU_REQUESTED,

	17 GE_HELP_SCREEN_FINISHED,
	18 GE_ABOUT_SCREEN_FINISHED,

	19 GE_SUCCESS_SCREEN_FINISHED,
	20 GE_FAILURE_SCREEN_FINISHED,

	21 GE_GAME_FINISHED,

	22 GE_ADDITIONAL_RENDER_STARTING,
	23 GE_ADDITIONAL_RENDER_FINISHED,
};